<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!--suppress SqlNoDataSourceInspection, SqlDialectInspection -->
<mapper namespace="org.clever.security.mapper.ApiPermissionMapper">
    <select id="getByTargetMethod" resultType="org.clever.security.dto.response.GetApiPermissionRes">
        select
            b.id,
            b.domain_id,
            b.str_flag,
            b.permission_type,
            b.enabled,
            a.class_name,
            a.method_name,
            a.method_params,
            a.api_path,
            a.api_exist
        from api_permission a left join permission b on (a.permission_id = b.id)
        where a.class_name = #{className}
            and a.method_name = #{methodName}
            and a.method_params = #{methodParams}
            and b.domain_id = #{domainId}
    </select>

    <select id="findApiPermissionBydDomainId" resultType="org.clever.security.model.auth.ApiPermissionEntity">
        select
            a.id as permission_id,
            a.domain_id,
            a.str_flag,
            a.permission_type,
            a.enabled,
            a.description,
            b.id as api_permission_id,
            b.title,
            b.class_name,
            b.method_name,
            b.method_params,
            b.api_path,
            b.api_exist
        from permission a left join api_permission b on (a.id = b.permission_id)
        where a.permission_type=1 and a.domain_id=#{domainId} and b.domain_id=#{domainId}
    </select>

    <select id="findApiByMenu" resultType="org.clever.security.dto.response.admin.ApiPermissionQueryRes">
        select
            b.id,
            b.domain_id,
            b.permission_id,
            b.title,
            b.class_name,
            b.method_name,
            b.method_params,
            b.api_path,
            b.api_exist,
            b.create_at,
            b.update_at,
            c.str_flag,
            c.permission_type,
            c.enabled,
            c.description,
            d.name as domain_name
        from menu_api a
            left join api_permission b on (a.api_id=b.id and a.domain_id=b.domain_id)
            left join permission c on (b.permission_id=c.id and a.domain_id=c.domain_id)
            left join domain d on (a.domain_id=d.id)
        where a.menu_id=#{menuId}
        order by a.create_at desc
    </select>

    <select id="findApiByUi" resultType="org.clever.security.dto.response.admin.ApiPermissionQueryRes">
        select
            b.id,
            b.domain_id,
            b.permission_id,
            b.title,
            b.class_name,
            b.method_name,
            b.method_params,
            b.api_path,
            b.api_exist,
            b.create_at,
            b.update_at,
            c.str_flag,
            c.permission_type,
            c.enabled,
            c.description,
            d.name as domain_name
        from ui_api a
            left join api_permission b on (a.api_id=b.id and a.domain_id=b.domain_id)
            left join permission c on (b.permission_id=c.id and a.domain_id=c.domain_id)
            left join domain d on (a.domain_id=d.id)
        where a.ui_id=#{uiId}
        order by a.create_at desc
    </select>

    <select id="pageQuery" resultType="org.clever.security.dto.response.admin.ApiPermissionQueryRes">
        select
            a.*,
            b.str_flag,
            b.permission_type,
            b.enabled,
            b.description,
            c.name as domain_name
        from api_permission a
            left join permission b on (a.permission_id=b.id)
            left join domain c on (b.domain_id=c.id)
        <where>
            and b.permission_type = 1
            <if test="query.id!=null">
                and a.id = #{query.id}
            </if>
            <if test="query.domainId!=null">
                and b.domain_id = #{query.domainId}
            </if>
            <if test="query.title!=null and query.title!=''">
                and a.title like concat('%', #{query.title}, '%')
            </if>
            <if test="query.className!=null and query.className!=''">
                and a.class_name like concat('%', #{query.className}, '%')
            </if>
            <if test="query.methodName!=null and query.methodName!=''">
                and a.method_name like concat('%', #{query.methodName}, '%')
            </if>
            <if test="query.apiPath!=null and query.apiPath!=''">
                and a.api_path like concat('%', #{query.apiPath}, '%')
            </if>
            <if test="query.apiExist!=null">
                and a.api_exist = #{query.apiExist}
            </if>
            <if test="query.strFlag!=null and query.strFlag!=''">
                and b.str_flag = #{query.strFlag}
            </if>
            <if test="query.enabled!=null">
                and b.enabled = #{query.enabled}
            </if>
            <if test="query.createAtStart!=null">
                and a.create_at>=#{query.createAtStart}
            </if>
            <if test="query.createAtEnd!=null">
                <![CDATA[ and a.create_at<=#{query.createAtEnd} ]]>
            </if>
        </where>
    </select>
</mapper>